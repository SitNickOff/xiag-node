{"version":3,"sources":["actions/ws.js","actions/questions.js","actions/user.js","reducers/questions.js","reducers/user.js","reducers/ws.js","reducers/index.js","middleware/local-storage.js","store/index.js","Components/ToolbarLink/index.jsx","Components/Toolbar/index.jsx","Components/Header/index.jsx","Components/Content/index.jsx","Components/QuestionList.jsx/template.jsx","Components/QuestionList.jsx/index.jsx","Pages/IndexPage.jsx","Components/QuestionView.jsx/ResponseForm.jsx","Components/QuestionView.jsx/PollResult.jsx","Components/QuestionView.jsx/template.jsx","Components/QuestionView.jsx/index.jsx","Pages/QuestionVeiwPage.jsx","Components/QuestionEdit/template.jsx","Components/QuestionEdit/index.jsx","Pages/QuestionEditPage.jsx","Pages/NotFound.jsx","Components/Page/index.jsx","App.js","serviceWorker.js","index.js"],"names":["WS_CREATE_CONNECTION","WS_ONOPEN","WS_ONCLOSE","WS_ONMESSAGE","WS_SEND_MESSAGE","QUESTIONS_GET","questionsGet","callBack","dispatch","axios","get","then","response","data","answer","type","questions","catch","error","console","log","message","QUESTION_CREATE","QUESTION_UPDATE","questionUpdate","question","id","_id","post","concat","QUESTION_DELETE","QUESTIONS_ADD_RESPONSE","QuestionAddResponse","resp","respToServer","Object","objectSpread","isMine","changedQuestionToServer","respondentsAnswers","toConsumableArray","changedQuestionToLocal","USER_ADD","initialState","content","answers","author","respondent","reducer","state","arguments","length","undefined","action","map","lQuestion","find","q","rA","rIndex","quest","name","userName","ws","send","combineReducers","questionsReducer","user","userReducer","wsReducer","key","json","localStorage","getItem","JSON","parse","loadState","store","createStore","applyMiddleware","promise","thunk","next","result","stringify","getState","setItem","logger","ToolbarLink","_ref","children","rest","objectWithoutProperties","react_default","a","createElement","react_router_dom","assign","activeClassName","withStyles","theme","root","link","margin","classes","className","Components_ToolbarLink","to","href","target","rel","Header","props","Fragment","src","alt","Components_Toolbar","Content","classnames","QuestionsList","this","_this$props","history","questionDelete","style","display","marginBottom","marginRight","onClick","push","index","justifyContent","React","Component","QuestionListContainer","connect","questionId","QuestionListTemplate","withRouter","IndexPage","QuestionList_jsx","ResponseForm","_this","handleChangeResponden","event","setState","value","handleSelectAnswer","handleSendResponse","userAdd","addResponse","_this2","onChange","placeholder","flexDirection","PollResult","marginTop","rAnswer","background","aIndex","QuestionView","fetching","resA","QuestionView_jsx_ResponseForm","QuestionView_jsx_PollResult","QuestionViewContainer","match","params","QuestionViewTemplate","QuestionViewPage","QuestionView_jsx","EditForm","handleChangeContent","handleAddAnswer","handleChangeAnswer","i","redirectToPollPage","redirectToPageAllQuestions","addQuestionChanges","validate","forEach","questionCreate","QuestionEditContainer","insertedId","QuestionEditTemplate","QuestionEditPage","QuestionEdit","NotFound","Page","Components_Header","Components_Content","react_router","exact","path","component","WebSocket","onopen","onclose","onmessage","wsOnmessage","App","Components_Page","Boolean","window","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e91aec5.chunk.js","sourcesContent":["import { questionsGet } from \"./questions\";\r\n\r\nexport const WS_CREATE_CONNECTION = 'WS_CREATE_CONNECTION';\r\n\r\nexport function createWsConnection() {\r\n    return dispatch=> {\r\n        const ws = new WebSocket('ws://localhost:5001');\r\n\r\n        ws.onopen = () => dispatch(wsOnopen()) ;\r\n        ws.onclose = () => dispatch(wsOnclose()) ;\r\n        ws.onmessage = message => dispatch(wsOnmessage(message)) ;\r\n\r\n        dispatch({\r\n            type: WS_CREATE_CONNECTION,\r\n            ws\r\n        })\r\n    }  \r\n}\r\n\r\nexport const WS_ONOPEN = 'WS_ONOPEN';\r\n\r\nexport function wsOnopen() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_ONOPEN\r\n        })\r\n    }\r\n}\r\n\r\nexport const WS_ONCLOSE = 'WS_ONCLOSE';\r\n\r\nexport function wsOnclose() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_ONCLOSE\r\n        })\r\n    }\r\n}\r\n\r\nexport const WS_ONMESSAGE = 'WS_ONMESSAGE';\r\n\r\nexport function wsOnmessage(message) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_ONMESSAGE,\r\n            message\r\n        });\r\n        dispatch(questionsGet());\r\n    }\r\n}\r\n\r\nexport const WS_SEND_MESSAGE = 'WS_SEND_MESSAGE';\r\n\r\nexport function wsSendMessage(message) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_SEND_MESSAGE,\r\n            message\r\n        });\r\n    }\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nimport { wsSendMessage } from './ws'\r\n\r\nexport const QUESTIONS_GET = 'QUESTIONS_GET';\r\n\r\nexport function questionsGet(callBack) {\r\n    return dispatch => {\r\n        return axios.get('http://localhost:5000/api/')\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTIONS_GET,\r\n                    questions: answer,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack();\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n}\r\n\r\nexport const QUESTION_CREATE = 'QUESTION_CREATE';\r\n\r\nexport function questionCreate(question, callBack) {\r\n    return dispatch => {\r\n        delete question._id;\r\n        return axios.post('http://localhost:5000/api/create', question)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                console.log('QUESTION_CREATE: ', {\r\n                    ...question,\r\n                    _id: answer.insertedId,\r\n                    answer\r\n                });\r\n                dispatch({\r\n                    type: QUESTION_CREATE,\r\n                    question: {\r\n                        ...question,\r\n                        _id: answer.insertedId,\r\n                        answer\r\n                    }\r\n                });\r\n\r\n                if (callBack) callBack(answer.insertedId);\r\n            })\r\n            .catch(error => console.log(error.message));\r\n        \r\n    }\r\n}\r\n\r\nexport const QUESTION_UPDATE = 'QUESTION_UPDATE';\r\n\r\nexport function questionUpdate(question, callBack) {\r\n    return dispatch => {\r\n        const id = question._id;\r\n        delete question._id;\r\n        return axios.post(`http://localhost:5000/api/${id}/update`, question)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_UPDATE,\r\n                    question,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack(id);\r\n            })\r\n            .catch(error => console.log(error.message));\r\n\r\n    }\r\n}\r\n\r\nexport const QUESTION_DELETE = 'QUESTION_DELETE';\r\n\r\nexport function questionDelete(questionId) {\r\n    return dispatch => {\r\n        return axios.post(`http://localhost:5000/api/${questionId}/delete`)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_DELETE,\r\n                    questionId,\r\n                    answer\r\n                });\r\n                dispatch(questionsGet());\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n}\r\n\r\n\r\nexport const QUESTIONS_ADD_RESPONSE = 'QUESTIONS_ADD_RESPONSE';\r\n\r\nexport function QuestionAddResponse(question, resp) {\r\n    return dispatch => {\r\n        const respToServer = {...resp};\r\n        delete respToServer.isMine;\r\n        const changedQuestionToServer = {\r\n            ...question,\r\n            respondentsAnswers: [...question.respondentsAnswers, respToServer]\r\n        };\r\n        const changedQuestionToLocal = {\r\n            ...question,\r\n            respondentsAnswers: [...question.respondentsAnswers, resp]\r\n        };\r\n        dispatch(questionsGet(()=>{\r\n            \r\n            dispatch(questionUpdate(changedQuestionToServer, ()=>dispatch(wsSendMessage(changedQuestionToServer))));\r\n            dispatch({\r\n                type: QUESTIONS_ADD_RESPONSE,\r\n                question: changedQuestionToLocal,\r\n                resp\r\n            });\r\n        }));\r\n        \r\n        \r\n    }\r\n}","export const USER_ADD = 'USER_ADD';\r\n\r\nexport function userAdd(userName) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: USER_ADD,\r\n            userName\r\n        });\r\n    }\r\n}\r\n","import {\r\n    QUESTIONS_ADD_RESPONSE, QUESTION_CREATE, QUESTION_UPDATE, QUESTIONS_GET\r\n} from '../actions';\r\n\r\nconst initialState = [\r\n    {\r\n        _id: 1,\r\n        content: 'Вы умный?',\r\n        answers: ['Да', 'Нет'],\r\n        author: 'Ситников А.',\r\n        respondentsAnswers: [\r\n            {\r\n                respondent: 'Ситников А.',\r\n                answer: 'Да'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        _id: 2,\r\n        content: 'На сколько Вы красивый?',\r\n        answers: ['Самый красивый', 'Очень красивый', 'Симпатичный'],\r\n        author: 'Ситников А.',\r\n        respondentsAnswers: []\r\n    }\r\n];\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case QUESTIONS_GET:\r\n            return action.questions.map(question=>{\r\n                if (!question.answers)\r\n                    return {\r\n                        ...question,\r\n                        answers: [],\r\n                        respondentsAnswers: []\r\n                    }\r\n            \r\n                const lQuestion = state.find(q=>q._id===question._id);\r\n\r\n                if (lQuestion===undefined) return question;\r\n                \r\n                return {\r\n                    ...question,\r\n                    respondentsAnswers: question.respondentsAnswers.map((rA, rIndex)=>{\r\n                        if (lQuestion.respondentsAnswers[rIndex]&&lQuestion.respondentsAnswers[rIndex].isMine)\r\n                            return lQuestion.respondentsAnswers[rIndex];\r\n\r\n                        return rA;\r\n                    })\r\n                };\r\n            });\r\n\r\n        case QUESTION_CREATE:\r\n            return [\r\n                ...state,\r\n                {\r\n                    ...action.question, \r\n                    _id: state.length+1\r\n                }\r\n            ];\r\n\r\n        case QUESTION_UPDATE:\r\n            return state.map(question=>{\r\n                if (question._id===action.question._id)\r\n                    return action.question;\r\n\r\n                return question;\r\n            })\r\n\r\n        case QUESTIONS_ADD_RESPONSE:            \r\n            return state.map(quest=>{\r\n                if (quest._id===action.question._id) {\r\n                    return action.question;\r\n                }\r\n\r\n                return quest;\r\n            });\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { USER_ADD } from \"../actions/user\";\r\n\r\nconst initialState = {\r\n    name: ''\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_ADD:\r\n            return {\r\n                ...state,\r\n                name: action.userName\r\n            };\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { WS_CREATE_CONNECTION, WS_SEND_MESSAGE } from \"../actions\";\r\n\r\nfunction reducer(state=null, action) {\r\n    switch (action.type) {\r\n        case WS_CREATE_CONNECTION:\r\n            return action.ws;\r\n\r\n        case WS_SEND_MESSAGE:\r\n            state.send(action.message);\r\n\r\n            return state;\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\n\r\nimport {default as questionsReducer} from './questions';\r\nimport {default as userReducer} from './user';\r\nimport {default as wsReducer} from './ws';\r\n\r\n\r\nconst reducer = combineReducers({\r\n    questions: questionsReducer,\r\n    user: userReducer,\r\n    ws: wsReducer\r\n});\r\n\r\nexport default reducer;","export function loadState(key = 'state') {\r\n    try {\r\n        let json = localStorage.getItem(key);\r\n\r\n        if (json===null) {\r\n            return undefined;\r\n        } else {\r\n            return JSON.parse(json);\r\n        }\r\n    } catch (error) {\r\n        return undefined;    \r\n    }\r\n}\r\n\r\nexport default key => store => next => action => {\r\n    let result = next(action);\r\n\r\n    try {\r\n        let json = JSON.stringify(key?store.getState()[key]:store.getState());\r\n        localStorage.setItem(key || 'state', json);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return result;\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport promise from 'redux-promise';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport reducer from '../reducers';\r\n\r\nimport localStorage, {loadState} from '../middleware/local-storage';\r\n\r\nlet initialState = {};\r\n\r\nlet store_var;\r\n\r\ninitialState = loadState();\r\nstore_var = createStore(reducer, initialState, applyMiddleware(promise, thunk, localStorage(), logger));\r\n\r\nconst store = store_var;\r\n\r\nexport default store;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction ToolbarLink({ children, ...rest }) {\r\n    return (\r\n        <NavLink activeClassName=\"button--active\" {...rest}>{children}</NavLink>\r\n    );\r\n}\r\n\r\nexport default ToolbarLink;","import React from 'react';\r\nimport ToolbarLink from '../ToolbarLink';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n    },\r\n    link: {\r\n        margin: '0 8px'\r\n    }\r\n});\r\n\r\nconst Toolbar = ({classes}) => {\r\n    return (\r\n        <nav className={classes.root}>\r\n            <ToolbarLink to=\"/\" className={classes.link}>Poll</ToolbarLink>\r\n            \r\n            <a className = {classes.link} href='https://test-task.xiag.ch/fullstack-developer.html' target='_blank' rel=\"noopener noreferrer\">\r\n                Task\r\n            </a>                    \r\n            \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Toolbar);","import React from 'react';\r\n\r\nimport Toolbar from '../Toolbar';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page__header\">\r\n                <div className=\"page__logo\">\r\n                    <a href=\"https://www.xiag.ch\" target='_blank' rel='noopener noreferrer'>\r\n                        <img src=\"https://test-task.xiag.ch/images/page-logo.png\" alt=\"XIAG AG\"/>\r\n                    </a>\r\n                </div> \r\n                <Toolbar />               \r\n            </div>            \r\n            <div className=\"page__image\">\r\n                <div className=\"page__task-title\">\r\n                    Poll website task\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classnames from 'classnames'\r\n\r\nconst Content = (props) => {\r\n    return (\r\n        <div className={classnames('page__content', 'page__content--padding')}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nimport ToolbarLink from '../ToolbarLink';\r\n\r\nclass QuestionsList extends React.Component{\r\n\r\n    componentDidMount() {\r\n        this.props.questionsGet();\r\n    }\r\n\r\n    render() {\r\n        const {questions, history, questionDelete} = this.props;\r\n    \r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex', marginBottom: 16}}>\r\n                    <h2 style={{marginRight: 'auto'}}>Question List</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/')} >Add Question</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"ex2-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Number</th>\r\n                            <th>Question</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {questions.map((question, index)=>\r\n                            <tr key={index}>\r\n                                <td>{index+1}</td>\r\n                                <td>{question.content}</td>\r\n                                <td style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                                    <ToolbarLink to={`/poll/${question._id}`} >View</ToolbarLink> \r\n                                    <ToolbarLink to={`/poll/${question._id}/edit`} >Edit</ToolbarLink>\r\n                                    <ToolbarLink to={`/poll`} onClick={()=>questionDelete(question._id)} >Delete</ToolbarLink>\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    \r\n                    </tbody>\r\n                </table>\r\n\r\n                \r\n            </React.Fragment>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionsList;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport QuestionListTemplate from './template';\r\nimport { questionsGet, questionDelete } from '../../actions';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        questions: state.questions,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        questionsGet: () => dispatch(questionsGet()),\r\n        questionDelete: (id) => dispatch(questionDelete(id))\r\n    };\r\n}\r\n\r\nconst QuestionListContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionListTemplate)\r\n\r\nexport default withRouter(QuestionListContainer);","import React from 'react';\r\n\r\nimport QuestionList from '../Components/QuestionList.jsx';\r\n\r\nconst IndexPage = (props) => {\r\n    return (\r\n        <div className='poll'>\r\n            <QuestionList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndexPage;","import React from 'react';\r\n\r\nclass ResponseForm extends React.Component{\r\n\r\n    state = {\r\n        respondent: this.props.user.name,\r\n        answer: '',\r\n        isMine: true\r\n    };\r\n\r\n    handleChangeResponden = event => {\r\n        this.setState({ \r\n            respondent: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSelectAnswer = event => {\r\n        this.setState({answer:event.target.value});\r\n    }\r\n    \r\n    handleSendResponse = () => {\r\n        if (this.state.respondent!==''&&this.state.answer!=='') {\r\n            this.props.userAdd(this.state.respondent);\r\n            this.props.addResponse(this.props.question, this.state);\r\n        } else \r\n            console.log('alert: fill all fields');\r\n    }\r\n\r\n    render() {        \r\n        const {question} = this.props;\r\n        return (\r\n            <div className=\"ex2-question\">\r\n                <div className=\"ex2-question__label\">\r\n                    Your name:\r\n                </div>\r\n                <div className=\"ex2-question__input\">\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"input-text\" \r\n                        value={this.state.respondent} \r\n                        onChange={this.handleChangeResponden}\r\n                        placeholder={'insert your name'}\r\n                    />\r\n                </div>\r\n                <div className=\"ex2-question__answer\" style={{display: 'flex', flexDirection: 'column'}}>\r\n                    {question.answers.map((answer, id) =>\r\n                        <label key={id}>\r\n                            <input type=\"radio\" name=\"do-we-go\" value={answer} onChange={this.handleSelectAnswer}/>\r\n                            {answer}\r\n                        </label>\r\n                    )}\r\n                </div>\r\n                <div style={{display: 'flex'}}>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <input type=\"submit\" className=\"btn\" value=\"Submit\" onClick={this.handleSendResponse}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResponseForm;\r\n","import React from 'react';\r\n\r\nconst PollResult = ({question, user}) => {\r\n    return (\r\n        <div>\r\n            <h3>Results</h3>\r\n            <table className=\"ex2-table\" style={{marginTop: 16}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        {question.answers.map((answer, index)=>\r\n                            <th key={index}>{answer}</th>    \r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {question.respondentsAnswers.map((rAnswer, index) => \r\n                        <tr key={index} style={{background: rAnswer.isMine?'rgb(248, 155, 28, .2)':'inherit'}}>\r\n                            <td>{rAnswer.respondent}</td>\r\n                            {question.answers.map((answer, aIndex)=>\r\n                                <td key={aIndex}>{answer===rAnswer.answer?'X':''}</td>    \r\n                            )}\r\n                        </tr>  \r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PollResult;","import React from 'react';\r\nimport ResponseForm from './ResponseForm';\r\nimport PollResult from './PollResult';\r\n\r\nclass QuestionView extends React.Component {\r\n    state = {\r\n        fetching: true\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.props.questionsGet();        \r\n    } \r\n\r\n    componentDidUpdate() {\r\n        if (this.state.fetching)\r\n            this.setState({fetching: false});\r\n    }\r\n\r\n    render() {\r\n        const {question, history, addResponse, userAdd, user} = this.props;\r\n        const fetching = this.state.fetching;\r\n        console.log({fetching, question});\r\n        if (this.state.fetching) return <h2>Loading ...</h2>;\r\n        else\r\n            if (question===undefined) return <h2>Page Not Found</h2>;\r\n            else\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex'}}>\r\n                    <h2 style={{marginRight: 'auto'}}>{question.content}</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/poll')}>All Polls</button>\r\n                    </div>\r\n                </div>\r\n                {question.respondentsAnswers.find(resA=>resA.isMine)===undefined&&\r\n                    <ResponseForm question={question} user={user} addResponse = {addResponse} userAdd={userAdd} />\r\n                }\r\n                <PollResult question={question} user={user}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionView;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport QuestionViewTemplate from './template';\r\n\r\nimport { QuestionAddResponse, questionsGet } from '../../actions'\r\nimport { userAdd } from '../../actions/user';\r\n\r\nfunction mapStateToProps(state, props) {\r\n    return {\r\n        question: state.questions.find(question=>question._id===props.match.params.id),\r\n        user: state.user\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        addResponse: (questionId, resp) => dispatch(QuestionAddResponse(questionId, resp)),\r\n        userAdd: (userName) => dispatch(userAdd(userName)),\r\n        questionsGet: () => dispatch(questionsGet()),\r\n    };\r\n}\r\n\r\nconst QuestionViewContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionViewTemplate)\r\n\r\nexport default withRouter(QuestionViewContainer);","import React from 'react';\r\n\r\nimport QuestionView from '../Components/QuestionView.jsx';\r\n\r\nconst QuestionViewPage = () => {\r\n    return (\r\n        <div className='poll'>\r\n            <QuestionView />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default QuestionViewPage;","import React from 'react';\r\nimport classes from 'classnames'\r\n\r\nclass EditForm extends React.Component {\r\n    state = {\r\n        _id: this.props.question?this.props.question._id: 0,\r\n        content: this.props.question?this.props.question.content:'',\r\n        answers: this.props.question?this.props.question.answers:['',''],\r\n        respondentsAnswers:this.props.question?this.props.question.respondentsAnswers:[]\r\n    }\r\n\r\n    handleChangeContent = event => {\r\n        this.setState({ content: event.target.value });\r\n    };\r\n\r\n    handleAddAnswer = () => {\r\n        this.setState({answers: [...this.state.answers, '']})\r\n    }\r\n\r\n    handleChangeAnswer = index => event => {\r\n        this.setState({ \r\n            answers: this.state.answers.map((a, i)=>{\r\n                if (i===index)\r\n                    return event.target.value;\r\n                \r\n                return a;                \r\n            })\r\n        });\r\n    };\r\n\r\n    redirectToPollPage = (id) => this.props.history.push(`/poll/${id}`);\r\n    redirectToPageAllQuestions = () => this.props.history.push('/poll')\r\n\r\n    addQuestionChanges = () => {\r\n        let validate = true;\r\n\r\n        if (this.state.content==='') validate = false;\r\n\r\n        this.state.answers.forEach(answer => {\r\n            if (answer==='') validate=false;\r\n        });\r\n\r\n        if (validate) {    \r\n            if (this.state._id === 0) {\r\n                this.props.questionCreate(this.state, this.redirectToPollPage);\r\n            } else {\r\n                this.props.questionUpdate(this.state, this.redirectToPollPage);\r\n            }           \r\n\r\n        } else\r\n            console.log('alert: fill all fields');\r\n    }\r\n\r\n    render() {\r\n        const { history } = this.props;\r\n        const question = this.state;\r\n        console.log({question});\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex', marginBottom: 16}}>\r\n                    <h2 style={{marginRight: 'auto'}}>{question?'Edit Question': 'New Question'}</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/poll')} >All Polls</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"poll-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Question:</th>\r\n                            <th>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    value={question?question.content:''} \r\n                                    className=\"input-text\" \r\n                                    placeholder='Insert question'\r\n                                    onChange = {this.handleChangeContent}\r\n                                />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {question.answers.map((answer, index)=>\r\n                            <tr key={index}>\r\n                                <th>{`Answer ${index+1}:`}</th>\r\n                                <td>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        value={answer} \r\n                                        placeholder='Enter option' \r\n                                        onChange={this.handleChangeAnswer(index)} \r\n                                        className=\"input-text\" \r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    <tr>\r\n                        <td className=\"poll-table__plus\">\r\n                            <button className={classes(\"btn\",\"btn--plus\")} onClick={this.handleAddAnswer}>\r\n                                +\r\n                            </button>\r\n                        </td>\r\n                        <td> </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn--start\" onClick={this.addQuestionChanges}>\r\n                    {question._id?'Change':'Start'}\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditForm;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport { questionCreate, questionUpdate} from '../../actions'\r\n\r\nimport QuestionEditTemplate from './template';\r\n\r\nfunction mapStateToProps(state, props) {\r\n    return {\r\n        question: state.questions.find(question=>question._id===props.match.params.id),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        questionCreate: (question, callBack) => dispatch(questionCreate(question, callBack)),\r\n        questionUpdate: (question, callBack) => dispatch(questionUpdate(question, callBack)),\r\n    };\r\n}\r\n\r\nconst QuestionEditContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionEditTemplate)\r\n\r\nexport default withRouter(QuestionEditContainer);","import React from 'react';\r\n\r\nimport EditForm from '../Components/QuestionEdit';\r\n\r\nconst QuestionEditPage = () => {\r\n    return (\r\n        <div className='poll'>\r\n            <EditForm />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionEditPage;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <h1>NotFound</h1>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { \r\n    Route, \r\n    Switch, \r\n    //withRouter \r\n} from 'react-router-dom';\r\n\r\nimport Header from '../Header';\r\nimport Content from '../Content';\r\nimport IndexPage from '../../Pages/IndexPage';\r\nimport QuestionViewPage from '../../Pages/QuestionVeiwPage';\r\nimport QuestionEditPage from '../../Pages/QuestionEditPage';\r\nimport NotFound from '../../Pages/NotFound';\r\n\r\n\r\n\r\nconst Page = (props) => {\r\n    return (\r\n        <div className=\"page\">\r\n            <Header />\r\n            <Content>\r\n                <Switch>\r\n                    <Route exact path='/' component={QuestionEditPage}/>\r\n                    <Route exact path='/poll' component={IndexPage} {...props}/>\r\n                    {/* <Route exact path='/poll/create' component={QuestionEditPage} /> */}\r\n                    <Route exact path='/poll/:id' component={QuestionViewPage} />   \r\n                    <Route exact path='/poll/:id/edit' component={QuestionEditPage} />                 \r\n                    <Route component={NotFound} />\r\n                </Switch>\r\n            </Content>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default Page;","import React from 'react';\nimport './App.css';\nimport store from './store';\n\nimport Page from './Components/Page';\nimport { createWsConnection } from './actions';\n\nstore.dispatch(createWsConnection());\n\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}