{"version":3,"sources":["actions/ws.js","actions/questions.js","actions/user.js","reducers/questions.js","reducers/fetching.js","reducers/user.js","reducers/ws.js","reducers/index.js","middleware/local-storage.js","store/index.js","Components/ToolbarLink/index.jsx","Components/Toolbar/index.jsx","Components/Header/index.jsx","Components/Content/index.jsx","Components/QuestionList.jsx/template.jsx","Components/QuestionList.jsx/index.jsx","Pages/IndexPage.jsx","Components/QuestionView.jsx/ResponseForm.jsx","Components/QuestionView.jsx/PollResult.jsx","Components/QuestionView.jsx/template.jsx","Components/QuestionView.jsx/index.jsx","Pages/QuestionVeiwPage.jsx","Components/QuestionEdit/template.jsx","Components/QuestionEdit/index.jsx","Pages/QuestionEditPage.jsx","Pages/NotFound.jsx","Components/Page/index.jsx","App.js","serviceWorker.js","index.js"],"names":["WS_CREATE_CONNECTION","WS_ONOPEN","WS_ONCLOSE","WS_ONMESSAGE","WS_SEND_MESSAGE","QUESTIONS_REQUEST","questionsRequest","type","QUESTIONS_GET","questionsGet","callBack","dispatch","axios","get","then","response","data","answer","questions","catch","error","console","log","message","QUESTION_GET","questionGet","id","concat","question","alert","QUESTION_CREATE","QUESTION_UPDATE","questionUpdate","sQuestion","Object","objectSpread","_id","post","QUESTION_DELETE","QUESTIONS_ADD_RESPONSE","QuestionAddResponse","resp","changedQuestionToServer","respondentsAnswers","toConsumableArray","myResp","isMine","changedQuestionToLocal","questionId","USER_ADD","reducer","state","arguments","length","undefined","action","lQuestion","find","q","map","rA","rIndex","answers","quest","initialState","name","userName","ws","send","JSON","stringify","combineReducers","questionsReducer","user","userReducer","wsReducer","fetching","fetchingReducer","key","json","localStorage","getItem","parse","loadState","store","createStore","applyMiddleware","promise","thunk","next","result","getState","setItem","logger","ToolbarLink","_ref","children","rest","objectWithoutProperties","react_default","a","createElement","react_router_dom","assign","activeClassName","withStyles","theme","root","link","margin","classes","className","Components_ToolbarLink","to","href","target","rel","Header","props","Fragment","src","alt","Components_Toolbar","Content","classnames","QuestionsList","this","_this$props","history","questionDelete","style","display","marginBottom","marginRight","onClick","push","index","content","justifyContent","React","Component","QuestionListContainer","connect","QuestionListTemplate","withRouter","IndexPage","QuestionList_jsx","ResponseForm","respondent","_this","handleChangeResponden","event","setState","value","handleSelectAnswer","handleSendResponse","userAdd","addResponse","_this2","onChange","placeholder","flexDirection","PollResult","marginTop","rAnswer","background","aIndex","QuestionView","match","params","resA","QuestionView_jsx_ResponseForm","QuestionView_jsx_PollResult","QuestionViewContainer","QuestionViewTemplate","QuestionViewPage","QuestionView_jsx","EditForm","handleChangeContent","handleAddAnswer","handleChangeAnswer","i","redirectToPollPage","redirectToPageAllQuestions","addQuestionChanges","validate","forEach","questionCreate","QuestionEditContainer","insertedId","QuestionEditTemplate","QuestionEditPage","QuestionEdit","NotFound","textAlign","Page","Components_Header","Components_Content","react_router","exact","path","component","WebSocket","onopen","onclose","onmessage","wsOnmessage","App","Components_Page","Boolean","window","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76b70635.chunk.js","sourcesContent":["import { questionGet } from \"./questions\";\r\n\r\nexport const WS_CREATE_CONNECTION = 'WS_CREATE_CONNECTION';\r\n\r\nexport function createWsConnection() {\r\n    return dispatch=> {\r\n        const ws = new WebSocket('ws://localhost:5001');\r\n\r\n        ws.onopen = () => dispatch(wsOnopen()) ;\r\n        ws.onclose = () => dispatch(wsOnclose()) ;\r\n        ws.onmessage = message => dispatch(wsOnmessage(message)) ;\r\n\r\n        dispatch({\r\n            type: WS_CREATE_CONNECTION,\r\n            ws\r\n        })\r\n    }  \r\n}\r\n\r\nexport const WS_ONOPEN = 'WS_ONOPEN';\r\n\r\nexport function wsOnopen() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_ONOPEN\r\n        })\r\n    }\r\n}\r\n\r\nexport const WS_ONCLOSE = 'WS_ONCLOSE';\r\n\r\nexport function wsOnclose() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_ONCLOSE\r\n        })\r\n    }\r\n}\r\n\r\nexport const WS_ONMESSAGE = 'WS_ONMESSAGE';\r\n\r\nexport function wsOnmessage(message) {\r\n    return dispatch => {\r\n        const questionId = JSON.parse(message.data).questionId;\r\n         \r\n        dispatch(questionGet(questionId));\r\n        dispatch({\r\n            type: WS_ONMESSAGE,\r\n            message\r\n        });        \r\n    }\r\n}\r\n\r\nexport const WS_SEND_MESSAGE = 'WS_SEND_MESSAGE';\r\n\r\nexport function wsSendMessage(message) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: WS_SEND_MESSAGE,\r\n            message\r\n        });\r\n    }\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nimport { wsSendMessage } from './ws'\r\n\r\nexport const QUESTIONS_REQUEST = 'QUESTIONS_REQUEST';\r\n\r\nexport function questionsRequest() {\r\n    return {\r\n        type: QUESTIONS_REQUEST\r\n    };\r\n}\r\n\r\nexport const QUESTIONS_GET = 'QUESTIONS_GET';\r\n\r\nexport function questionsGet(callBack) {\r\n    return dispatch => {\r\n        dispatch(questionsRequest());\r\n        return axios.get('http://localhost:5000/api/')\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTIONS_GET,\r\n                    questions: answer,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack();\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n}\r\n\r\nexport function questionsGetForLocalStorage(questions, callBack) {\r\n    return dispatch => {\r\n        dispatch(questionsRequest());\r\n        return axios.post('http://localhost:5000/api/getByArray', questions)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTIONS_GET,\r\n                    questions: answer,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack();\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n}\r\n\r\nexport const QUESTION_GET = 'QUESTION_GET';\r\n\r\nexport function questionGet(id, callBack) {\r\n    return dispatch => {\r\n        dispatch(questionsRequest());\r\n        return axios.get(`http://localhost:5000/api/${id}/get`)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_GET,\r\n                    question: answer,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack();\r\n            })\r\n            .catch(error => alert(error.message));\r\n    }\r\n}\r\n\r\nexport const QUESTION_CREATE = 'QUESTION_CREATE';\r\n\r\nexport function questionCreate(question, callBack) {\r\n    return dispatch => {\r\n        delete question._id;\r\n        return axios.post('http://localhost:5000/api/create', question)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_CREATE,\r\n                    question: {\r\n                        ...question,\r\n                        _id: answer.insertedId,\r\n                        answer\r\n                    }\r\n                });\r\n\r\n                if (callBack) callBack(answer.insertedId);\r\n            })\r\n            .catch(error => console.log(error.message));\r\n        \r\n    }\r\n}\r\n\r\nexport const QUESTION_UPDATE = 'QUESTION_UPDATE';\r\n\r\nexport function questionUpdate(question, callBack) {\r\n    return dispatch => {\r\n        const sQuestion = {...question};\r\n        const id = sQuestion._id; console.log({id})\r\n        delete sQuestion._id;\r\n        return axios.post(`http://localhost:5000/api/${id}/update`, sQuestion)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_UPDATE,\r\n                    question,\r\n                    answer\r\n                });\r\n\r\n                if (callBack) callBack(id);\r\n            })\r\n            .catch(error => console.log(error.message));\r\n\r\n    }\r\n}\r\n\r\nexport const QUESTION_DELETE = 'QUESTION_DELETE';\r\n\r\nexport function questionDelete(questionId) {\r\n    return dispatch => {\r\n        return axios.post(`http://localhost:5000/api/${questionId}/delete`)\r\n            .then(response => response.data)\r\n            .then(answer => {\r\n                dispatch({\r\n                    type: QUESTION_DELETE,\r\n                    questionId,\r\n                    answer\r\n                });\r\n                dispatch(questionsGet());\r\n            })\r\n            .catch(error => console.log(error.message));\r\n    }\r\n}\r\n\r\n\r\nexport const QUESTIONS_ADD_RESPONSE = 'QUESTIONS_ADD_RESPONSE';\r\n\r\nexport function QuestionAddResponse(question, resp) {\r\n    return dispatch => {\r\n        \r\n        const changedQuestionToServer = {\r\n            ...question,\r\n            respondentsAnswers: [...question.respondentsAnswers, resp]\r\n        };\r\n        const myResp = {...resp, isMine: true}\r\n        const changedQuestionToLocal = {\r\n            ...question,\r\n            respondentsAnswers: [...question.respondentsAnswers, myResp]\r\n        };\r\n\r\n        dispatch(questionGet(question._id, ()=>{ \r\n            dispatch(questionUpdate(changedQuestionToServer, ()=>{                \r\n                dispatch({\r\n                    type: QUESTIONS_ADD_RESPONSE,\r\n                    question: changedQuestionToLocal,\r\n                    resp\r\n                }); \r\n                dispatch(wsSendMessage({questionId:question._id}));\r\n            }));\r\n            \r\n        }));\r\n        \r\n        \r\n    }\r\n}","export const USER_ADD = 'USER_ADD';\r\n\r\nexport function userAdd(userName) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: USER_ADD,\r\n            userName\r\n        });\r\n    }\r\n}\r\n","import {\r\n    QUESTIONS_ADD_RESPONSE, QUESTION_CREATE, QUESTION_UPDATE, QUESTIONS_GET, QUESTION_GET//, WS_ONMESSAGE\r\n} from '../actions';\r\n\r\n// const initialState = [\r\n//     {\r\n//         _id: 1,\r\n//         content: 'Вы умный?',\r\n//         answers: ['Да', 'Нет'],\r\n//         author: 'Ситников А.',\r\n//         respondentsAnswers: [\r\n//             {\r\n//                 respondent: 'Ситников А.',\r\n//                 answer: 'Да'\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         _id: 2,\r\n//         content: 'На сколько Вы красивый?',\r\n//         answers: ['Самый красивый', 'Очень красивый', 'Симпатичный'],\r\n//         author: 'Ситников А.',\r\n//         respondentsAnswers: []\r\n//     }\r\n// ];\r\n\r\nfunction reducer(state = [], action) {\r\n    switch (action.type) {\r\n\r\n        // case WS_ONMESSAGE:\r\n        //     const mQues = JSON.parse(action.message.data);            \r\n        //     const lQues = state.find(q=>q._id===mQues._id);\r\n        //     console.log({mQues, lQues});\r\n\r\n        //     if (lQues === undefined) return state;\r\n\r\n        //     return state.map(question=>{\r\n        //         if (question._id===lQues) \r\n        //             return {\r\n        //                 ...question,\r\n        //                 respondentsAnswers: question.respondentsAnswers.map((rA, rIndex)=>{\r\n        //                     if (lQues.respondentsAnswers[rIndex]&&lQues.respondentsAnswers[rIndex].isMine)\r\n        //                         return {...lQues.respondentsAnswers[rIndex]};\r\n\r\n        //                     return rA;\r\n        //                 })\r\n        //             };\r\n\r\n        //         return question;\r\n        //     });\r\n\r\n\r\n        case QUESTION_GET:\r\n            const lQuestion = state.find(q=>q._id===action.question._id);\r\n\r\n            if (lQuestion === undefined) return [...state, action.question];\r\n\r\n            return state.map(question=>{\r\n                \r\n                if (question._id===lQuestion._id) {\r\n                    return {\r\n                        ...action.question,\r\n                        respondentsAnswers: action.question.respondentsAnswers.map((rA, rIndex)=>{\r\n                            if (lQuestion.respondentsAnswers[rIndex]&&lQuestion.respondentsAnswers[rIndex].isMine)\r\n                                return {...lQuestion.respondentsAnswers[rIndex]};\r\n\r\n                            return rA;\r\n                        })\r\n                    };\r\n                }\r\n\r\n                return question;\r\n            });\r\n\r\n        case QUESTIONS_GET:\r\n            return action.questions.map(question=>{\r\n                if (!question.answers)\r\n                    return {\r\n                        ...question,\r\n                        answers: [],\r\n                        respondentsAnswers: []\r\n                    }\r\n            \r\n                const lQuestion = state.find(q=>q._id===question._id);\r\n\r\n                if (lQuestion===undefined) return question;\r\n                \r\n                return {\r\n                    ...question,\r\n                    respondentsAnswers: question.respondentsAnswers.map((rA, rIndex)=>{\r\n                        if (lQuestion.respondentsAnswers[rIndex]&&lQuestion.respondentsAnswers[rIndex].isMine)\r\n                            return {...lQuestion.respondentsAnswers[rIndex]};\r\n\r\n                        return rA;\r\n                    })\r\n                };\r\n            });\r\n\r\n        case QUESTION_CREATE:\r\n            return [\r\n                ...state,\r\n                {\r\n                    ...action.question, \r\n                    _id: state.length+1\r\n                }\r\n            ];\r\n\r\n        case QUESTION_UPDATE:\r\n            return state.map(question=>{\r\n                if (question._id===action.question._id)\r\n                    return action.question;\r\n\r\n                return question;\r\n            })\r\n\r\n        case QUESTIONS_ADD_RESPONSE:            \r\n            return state.map(quest=>{\r\n                if (quest._id===action.question._id) {\r\n                    return action.question;\r\n                }\r\n\r\n                return quest;\r\n            });\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { QUESTIONS_REQUEST, QUESTION_GET, QUESTIONS_GET } from \"../actions\";\r\n\r\nfunction reducer(state = false, action) {\r\n    switch (action.type) {\r\n        case QUESTIONS_REQUEST:\r\n            return true;\r\n\r\n        case QUESTION_GET:\r\n            return false;\r\n\r\n        case QUESTIONS_GET:\r\n            return false;            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { USER_ADD } from \"../actions/user\";\r\n\r\nconst initialState = {\r\n    name: ''\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_ADD:\r\n            return {\r\n                ...state,\r\n                name: action.userName\r\n            };\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { WS_CREATE_CONNECTION, WS_SEND_MESSAGE } from \"../actions\";\r\n\r\nfunction reducer(state=null, action) {\r\n    switch (action.type) {\r\n        case WS_CREATE_CONNECTION:\r\n            return action.ws;\r\n\r\n        case WS_SEND_MESSAGE:\r\n            state.send(JSON.stringify(action.message));\r\n\r\n            return state;\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\n\r\nimport {default as questionsReducer} from './questions';\r\nimport {default as fetchingReducer} from './fetching';\r\nimport {default as userReducer} from './user';\r\nimport {default as wsReducer} from './ws';\r\n\r\n\r\nconst reducer = combineReducers({\r\n    questions: questionsReducer,\r\n    user: userReducer,\r\n    ws: wsReducer,\r\n    fetching: fetchingReducer\r\n});\r\n\r\nexport default reducer;","export function loadState(key = 'state') {\r\n    try {\r\n        let json = localStorage.getItem(key);\r\n\r\n        if (json===null) {\r\n            return undefined;\r\n        } else {\r\n            return JSON.parse(json);\r\n        }\r\n    } catch (error) {\r\n        return undefined;    \r\n    }\r\n}\r\n\r\nexport default key => store => next => action => {\r\n    let result = next(action);\r\n    const state = store.getState();\r\n    try {\r\n        let json = JSON.stringify(key?state[key]:state);\r\n        localStorage.setItem(key || 'state', json);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    // console.log({state});\r\n    // console.log({saveState: JSON.parse(localStorage.getItem('state'))});\r\n\r\n    return result;\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport promise from 'redux-promise';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport reducer from '../reducers';\r\n\r\nimport localStorage, {loadState} from '../middleware/local-storage';\r\n\r\nlet initialState = {};\r\n\r\nlet store_var;\r\n\r\ninitialState = loadState();\r\nstore_var = createStore(reducer, initialState, applyMiddleware(promise, thunk, localStorage(), logger));\r\n\r\nconst store = store_var;\r\n\r\nexport default store;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction ToolbarLink({ children, ...rest }) {\r\n    return (\r\n        <NavLink activeClassName=\"button--active\" {...rest}>{children}</NavLink>\r\n    );\r\n}\r\n\r\nexport default ToolbarLink;","import React from 'react';\r\nimport ToolbarLink from '../ToolbarLink';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n    },\r\n    link: {\r\n        margin: '0 8px'\r\n    }\r\n});\r\n\r\nconst Toolbar = ({classes}) => {\r\n    return (\r\n        <nav className={classes.root}>\r\n            <ToolbarLink to=\"/\" className={classes.link}>New Poll</ToolbarLink>\r\n            <ToolbarLink to=\"/poll\" className={classes.link}>All Polls</ToolbarLink>\r\n            \r\n            <a className = {classes.link} href='https://test-task.xiag.ch/fullstack-developer.html' target='_blank' rel=\"noopener noreferrer\">\r\n                Test Task\r\n            </a>                    \r\n            \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Toolbar);","import React from 'react';\r\n\r\nimport Toolbar from '../Toolbar';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page__header\">\r\n                <div className=\"page__logo\">\r\n                    <a href=\"https://www.xiag.ch\" target='_blank' rel='noopener noreferrer'>\r\n                        <img src=\"https://test-task.xiag.ch/images/page-logo.png\" alt=\"XIAG AG\"/>\r\n                    </a>\r\n                </div> \r\n                <Toolbar />               \r\n            </div>            \r\n            <div className=\"page__image\">\r\n                <div className=\"page__task-title\">\r\n                    Poll website task\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport classnames from 'classnames'\r\n\r\nconst Content = (props) => {\r\n    return (\r\n        <div className={classnames('page__content', 'page__content--padding')}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nimport ToolbarLink from '../ToolbarLink';\r\n\r\nclass QuestionsList extends React.Component{\r\n\r\n    componentDidMount() {\r\n        this.props.questionsGet();\r\n    }\r\n\r\n    render() {\r\n        const {questions, history, questionDelete} = this.props;\r\n    \r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex', marginBottom: 16}}>\r\n                    <h2 style={{marginRight: 'auto'}}>Question List</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/')} >Add Question</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"ex2-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Number</th>\r\n                            <th>Question</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {questions.map((question, index)=>\r\n                            <tr key={index}>\r\n                                <td>{index+1}</td>\r\n                                <td>{question.content}</td>\r\n                                <td style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                                    <ToolbarLink to={`/poll/${question._id}`} >View</ToolbarLink> \r\n                                    <ToolbarLink to={`/poll/${question._id}/edit`} >Edit</ToolbarLink>\r\n                                    <ToolbarLink to={`/poll`} onClick={()=>questionDelete(question._id)} >Delete</ToolbarLink>\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    \r\n                    </tbody>\r\n                </table>\r\n\r\n                \r\n            </React.Fragment>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionsList;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport QuestionListTemplate from './template';\r\nimport { questionsGet, questionDelete } from '../../actions';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        questions: state.questions,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        questionsGet: () => dispatch(questionsGet()),\r\n        questionDelete: (id) => dispatch(questionDelete(id))\r\n    };\r\n}\r\n\r\nconst QuestionListContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionListTemplate)\r\n\r\nexport default withRouter(QuestionListContainer);","import React from 'react';\r\n\r\nimport QuestionList from '../Components/QuestionList.jsx';\r\n\r\nconst IndexPage = (props) => {\r\n    return (\r\n        <div className='poll'>\r\n            <QuestionList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndexPage;","import React from 'react';\r\n\r\nclass ResponseForm extends React.Component{\r\n\r\n    state = {\r\n        respondent: this.props.user.name,\r\n        answer: ''\r\n    };\r\n\r\n    handleChangeResponden = event => {\r\n        this.setState({ \r\n            respondent: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSelectAnswer = event => {\r\n        this.setState({answer:event.target.value});\r\n    }\r\n    \r\n    handleSendResponse = () => {\r\n        if (this.state.respondent!==''&&this.state.answer!=='') {\r\n            this.props.userAdd(this.state.respondent);\r\n            this.props.addResponse(this.props.question, this.state);\r\n        } else \r\n            alert('Fill All Fields');\r\n    }\r\n\r\n    render() {        \r\n        const {question} = this.props;\r\n        return (\r\n            <div className=\"ex2-question\">\r\n                <div className=\"ex2-question__label\">\r\n                    Your name:\r\n                </div>\r\n                <div className=\"ex2-question__input\">\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"input-text\" \r\n                        value={this.state.respondent} \r\n                        onChange={this.handleChangeResponden}\r\n                        placeholder={'insert your name'}\r\n                    />\r\n                </div>\r\n                <div className=\"ex2-question__answer\" style={{display: 'flex', flexDirection: 'column'}}>\r\n                    {question.answers.map((answer, id) =>\r\n                        <label key={id}>\r\n                            <input type=\"radio\" name=\"do-we-go\" value={answer} onChange={this.handleSelectAnswer}/>\r\n                            {answer}\r\n                        </label>\r\n                    )}\r\n                </div>\r\n                <div style={{display: 'flex'}}>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <input type=\"submit\" className=\"btn\" value=\"Submit\" onClick={this.handleSendResponse}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResponseForm;\r\n","import React from 'react';\r\n\r\nconst PollResult = ({question, user}) => {\r\n    return (\r\n        <div>\r\n            <h3>Results</h3>\r\n            <table className=\"ex2-table\" style={{marginTop: 16}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        {question.answers.map((answer, index)=>\r\n                            <th key={index}>{answer}</th>    \r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {question.respondentsAnswers.map((rAnswer, index) => \r\n                        <tr key={index} style={{background: rAnswer.isMine?'rgb(248, 155, 28, .2)':'inherit'}}>\r\n                            <td>{rAnswer.respondent}</td>\r\n                            {question.answers.map((answer, aIndex)=>\r\n                                <td key={aIndex}>{answer===rAnswer.answer?'X':''}</td>    \r\n                            )}\r\n                        </tr>  \r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PollResult;","import React from 'react';\r\nimport ResponseForm from './ResponseForm';\r\nimport PollResult from './PollResult';\r\n\r\nclass QuestionView extends React.Component {\r\n    componentDidMount() {\r\n        this.props.questionGet(this.props.match.params.id);   \r\n    } \r\n\r\n    render() {\r\n        const {question, history, addResponse, userAdd, user, fetching} = this.props;\r\n        if (fetching||!question) return <h2>Loading ...</h2>;\r\n        else\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex'}}>\r\n                    <h2 style={{marginRight: 'auto'}}>{question.content}</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/poll')}>All Polls</button>\r\n                    </div>\r\n                </div>\r\n                {question.respondentsAnswers.find(resA=>resA.isMine)===undefined&&\r\n                    <ResponseForm question={question} user={user} addResponse = {addResponse} userAdd={userAdd} />\r\n                }\r\n                <PollResult question={question} user={user}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionView;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport QuestionViewTemplate from './template';\r\n\r\nimport { QuestionAddResponse, questionsGet, questionGet } from '../../actions'\r\nimport { userAdd } from '../../actions/user';\r\n\r\nfunction mapStateToProps(state, props) {\r\n    return {\r\n        question: state.questions.find(question=>question._id===props.match.params.id),\r\n        user: state.user,\r\n        fetching: state.fetching\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        addResponse: (questionId, resp) => dispatch(QuestionAddResponse(questionId, resp)),\r\n        userAdd: (userName) => dispatch(userAdd(userName)),\r\n        questionsGet: () => dispatch(questionsGet()),\r\n        questionGet: (questionId) => dispatch(questionGet(questionId))\r\n    };\r\n}\r\n\r\nconst QuestionViewContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionViewTemplate)\r\n\r\nexport default withRouter(QuestionViewContainer);","import React from 'react';\r\n\r\nimport QuestionView from '../Components/QuestionView.jsx';\r\n\r\nconst QuestionViewPage = () => {\r\n    return (\r\n        <div className='poll'>\r\n            <QuestionView />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default QuestionViewPage;","import React from 'react';\r\nimport classes from 'classnames'\r\n\r\nclass EditForm extends React.Component {\r\n    state = {\r\n        _id: this.props.question?this.props.question._id: 0,\r\n        content: this.props.question?this.props.question.content:'',\r\n        answers: this.props.question?this.props.question.answers:['',''],\r\n        respondentsAnswers:this.props.question?this.props.question.respondentsAnswers:[]\r\n    }\r\n\r\n    handleChangeContent = event => {\r\n        this.setState({ content: event.target.value });\r\n    };\r\n\r\n    handleAddAnswer = () => {\r\n        this.setState({answers: [...this.state.answers, '']})\r\n    }\r\n\r\n    handleChangeAnswer = index => event => {\r\n        this.setState({ \r\n            answers: this.state.answers.map((a, i)=>{\r\n                if (i===index)\r\n                    return event.target.value;\r\n                \r\n                return a;                \r\n            })\r\n        });\r\n    };\r\n\r\n    redirectToPollPage = (id) => this.props.history.push(`/poll/${id}`);\r\n    redirectToPageAllQuestions = () => this.props.history.push('/poll')\r\n\r\n    addQuestionChanges = () => {\r\n        let validate = true;\r\n\r\n        if (this.state.content==='') validate = false;\r\n\r\n        this.state.answers.forEach(answer => {\r\n            if (answer==='') validate=false;\r\n        });\r\n\r\n        if (validate) {    \r\n            if (this.state._id === 0) {\r\n                this.props.questionCreate(this.state, this.redirectToPollPage);\r\n            } else {\r\n                this.props.questionUpdate(this.state, this.redirectToPollPage);\r\n            }           \r\n\r\n        } else\r\n            alert('Fill All Fields');\r\n    }\r\n\r\n    render() {\r\n        const { history } = this.props;\r\n        const question = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{display: 'flex', marginBottom: 16}}>\r\n                    <h2 style={{marginRight: 'auto'}}>{question?'Edit Question': 'New Question'}</h2>\r\n                    <div className=\"ex2-question__submit\">\r\n                        <button className=\"btn\" onClick={()=>history.push('/poll')} >All Polls</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"poll-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Question:</th>\r\n                            <th>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    value={question?question.content:''} \r\n                                    className=\"input-text\" \r\n                                    placeholder='Enter a question'\r\n                                    onChange = {this.handleChangeContent}\r\n                                />\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {question.answers.map((answer, index)=>\r\n                            <tr key={index}>\r\n                                <th>{`Answer ${index+1}:`}</th>\r\n                                <td>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        value={answer} \r\n                                        placeholder='Enter an option' \r\n                                        onChange={this.handleChangeAnswer(index)} \r\n                                        className=\"input-text\" \r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    <tr>\r\n                        <td className=\"poll-table__plus\">\r\n                            <button className={classes(\"btn\",\"btn--plus\")} onClick={this.handleAddAnswer}>\r\n                                +\r\n                            </button>\r\n                        </td>\r\n                        <td> </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn--start\" onClick={this.addQuestionChanges}>\r\n                    {question._id?'Change':'Start'}\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditForm;","import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport { questionCreate, questionUpdate} from '../../actions'\r\n\r\nimport QuestionEditTemplate from './template';\r\n\r\nfunction mapStateToProps(state, props) {\r\n    return {\r\n        question: state.questions.find(question=>question._id===props.match.params.id),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        questionCreate: (question, callBack) => dispatch(questionCreate(question, callBack)),\r\n        questionUpdate: (question, callBack) => dispatch(questionUpdate(question, callBack)),\r\n    };\r\n}\r\n\r\nconst QuestionEditContainer = connect(mapStateToProps, mapDispatchToProps)(QuestionEditTemplate)\r\n\r\nexport default withRouter(QuestionEditContainer);","import React from 'react';\r\n\r\nimport EditForm from '../Components/QuestionEdit';\r\n\r\nconst QuestionEditPage = () => {\r\n    return (\r\n        <div className='poll'>\r\n            <EditForm />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionEditPage;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <h2>Page Not Found</h2>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { \r\n    Route, \r\n    Switch, \r\n    //withRouter \r\n} from 'react-router-dom';\r\n\r\nimport Header from '../Header';\r\nimport Content from '../Content';\r\nimport IndexPage from '../../Pages/IndexPage';\r\nimport QuestionViewPage from '../../Pages/QuestionVeiwPage';\r\nimport QuestionEditPage from '../../Pages/QuestionEditPage';\r\nimport NotFound from '../../Pages/NotFound';\r\n\r\n\r\n\r\nconst Page = (props) => {\r\n    return (\r\n        <div className=\"page\">\r\n            <Header />\r\n            <Content>\r\n                <Switch>\r\n                    <Route exact path='/' component={QuestionEditPage}/>\r\n                    <Route exact path='/poll' component={IndexPage} {...props}/>\r\n                    {/* <Route exact path='/poll/create' component={QuestionEditPage} /> */}\r\n                    <Route exact path='/poll/:id' component={QuestionViewPage} />   \r\n                    <Route exact path='/poll/:id/edit' component={QuestionEditPage} />                 \r\n                    <Route component={NotFound} />\r\n                </Switch>\r\n            </Content>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default Page;","import React from 'react';\nimport './App.css';\nimport store from './store';\n\nimport Page from './Components/Page';\nimport { createWsConnection } from './actions';\n\nstore.dispatch(createWsConnection());\n\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}